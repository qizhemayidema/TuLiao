<?php

namespace app\index\controller;

use app\common\model\BothStatus;
use app\common\model\User as UserModel;
use app\common\model\BothStatus as BothStatusModel;
use app\common\model\Order as OrderModel;
use app\common\model\Shopping as ShoppingModel;
use app\common\model\UserAddress as AddressModel;
use think\Request;
use think\Validate;
use app\common\controller\Upload as CommonUpload;

class My extends Base
{
    protected $user = null;

    protected $pageLength = 10;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->user = $this->userInfo;

    }




    public function index(Request $request)
    {
        $this->assign('user_info', $this->user);

        //查询我的关注
        $both = $this->both($request);

        //查询我的粉丝
        $fans = $this->fans($request);

        $this->assign('both', $both);
        $this->assign('fans', $fans);

        return $this->fetch();
    }

    //个人信息
    public function info(Request $request)
    {
        $this->assign('user_info', $this->user);

        $this->assign('pageType', 'info');

        return $this->fetch();
    }

    //认证
    public function auth(Request $request)
    {
        $this->assign('user_info', $this->user);

        $this->assign('pageType', 'auth');

        return $this->fetch();
    }

    //我的关注
    public function both(Request $request)
    {

        $data = (new BothStatusModel())->alias('both')
            ->join('user', 'user.id = both.to_user_id and both.form_user_id = ' . $this->user->id)
            ->field('user.id user_id,user.nickname,user.avatar_url')
            ->order('both.id', 'desc')
            ->paginate(1);

        $this->assign('both', $data);
        $this->assign('pageType', 'both');

        return $this->fetch();
    }

    //我的粉丝
    public function fans(Request $request)
    {
        $data = (new BothStatusModel())->alias('both')
            ->join('user', 'user.id = both.form_user_id and both.to_user_id = ' . $this->user->id)
            ->field('user.id user_id,user.nickname,user.avatar_url')
            ->order('both.id', 'desc')
            ->paginate($this->pageLength);

        $this->assign('fans',$data);
        $this->assign('pageType','fans');

        return $this->fetch();
    }

    //我的订单
    public function order()
    {
        $order = (new OrderModel())->where(['user_id'=>$this->user->id])
            ->order('id','desc')
            ->paginate($this->pageLength);

        $this->assign('order',$order);
        $this->assign('pageType','order');

        return $this->fetch();
    }

    //购物车
    public function shopping()
    {
        $shopping = (new ShoppingModel())->alias('shopping')
            ->join('goods goods','shopping.goods_id = goods.id and shopping.user_id = '.$this->user->id)
            ->field('shopping.id,goods.id goods_id,shopping.num,goods.pic,shopping.create_time,goods.title,goods.real_price')
            ->paginate($this->pageLength);

        $this->assign('pageType','shopping');
        $this->assign('shopping',$shopping);
        return $this->fetch();
    }

    //我的地址
    public function address()
    {
        $this->assign('pageType','address');


        return $this->fetch();
    }

    //添加地址
    public function addressCreate()
    {
        return $this->fetch();
    }

    public function addressSave(Request $request)
    {
        $post = $request->post();
        $rules = [
            'province'  => 'require',
            'city'  => 'require',
            'area'  => 'require',
            'address'  => 'require|max:128',
            'user_name'  => 'require|max:32',
            'phone'  => 'require|max:11',
        ];

        $messages = [
            'province.require'  => '省必须选择',
            'city.require'      => '市必须选择',
            'area.require'      => '区必须选择',
            'address.require'   => '详细地址必须填写',
            'address.max'       => '详细地址最大长度为128',
            'user_name.require' => '姓名必须填写',
            'phone.require'     => '电话必须填写'
        ];

        $validate = new Validate($rules,$messages);
        if (!$validate->check($post)){
            return json(['code'=>0,'msg'=>$validate->getError()]);
        }

        (new AddressModel())->insert([
            'province'  => $post['province'],
            'city'      => $post['city'],
            'area'      => $post['area'],
            'address'   => $post['address'],
            'user_name' => $post['user_name'],
            'phone'     => $post['phone'],
            'user_id'   => $this->user->id,
        ]);

        return json(['code'=>1,'msg'=>'保存成功']);
    }


    public function authChange(Request $request)
    {
        if ($this->user->is_auth != 0 && $this->user->is_auth != 2)
            return json(['code' => '0', 'msg' => '您的认证信息已经在申请中或已经完成,无法认证']);

        $post = $request->post();

        $rules = [
            'card_front' => 'require',
            'card_reverse' => 'require',
            'real_name' => 'require|max:30',
        ];

        $message = [
            'card_front.require' => '身份证正面必须上传',
            'card_reverse.require' => '身份证反面必须上传',
            'real_name.require' => '昵称必须填写',
            'real_name.max' => '昵称最大长度30',
        ];

        $validate = new Validate($rules, $message);
        if (!$validate->check($post)) {
            return json(['code' => 0, 'msg' => $validate->getError()]);
        }

        $upload = new CommonUpload();

        $upload_path = 'user/';
        $id_card_front = $upload->uploadBase64Pic($post['card_front'], $upload_path);
        $id_card_reverse = $upload->uploadBase64Pic($post['card_reverse'], $upload_path);
        $data = [
            'id_card_front' => $id_card_front['msg'],
            'id_card_reverse' => $id_card_reverse['msg'],
            'real_name' => $post['real_name'],
            'is_auth' => 1,
        ];

        if ($id_card_front['code'] == 0) return json($id_card_front);
        if ($id_card_reverse['code'] == 0) return json($id_card_reverse);


        (new UserModel())->where(['id' => $this->user->id])->update($data);

        return json(['code' => 1, 'msg' => '申请成功,请耐心等待']);
    }

    //关注用户 1 or 取消关注 2
    public function focusUserOrRemove(Request $request)
    {
        $type = $request->post('type');
        $user_id = $request->post('user_id');
        $msg = '';

        $bothStatus = (new BothStatusModel());
        if ($type == 1) {
            $flag = $bothStatus->where(['form_user_id' => $this->user->id, 'to_user_id' => $user_id])->find();
            if (!$flag) $bothStatus->insert([
                'form_user_id' => $this->user->id,
                'to_user_id' => $user_id,
            ]);
            $msg = '关注成功';
        } elseif ($type == 2) {
            $bothStatus->where([
                'form_user_id' => $this->user->id,
                'to_user_id' => $user_id,
            ])->delete();
            $msg = '取消成功';

        }

        return json(['code' => 1, 'msg' => $msg]);
    }

    public function saveInfo(Request $request)
    {
        $post = $request->post();

        $rules = [
            'nickname' => 'require|max:30',
        ];

        $message = [
            'nickname.require' => '昵称必须填写',
            'nickname.max' => '昵称最大长度30',
        ];

        $validate = new Validate($rules, $message);
        if (!$validate->check($post)) {
            return json(['code' => 0, 'msg' => $validate->getError()]);
        }

        $data = [
            'nickname' => $post['nickname'],
        ];


        if ($post['tx']) {
            $res = (new CommonUpload())->uploadBase64Pic($post['tx'], 'user/');
            if ($res['code'] == 0) return json($res);
            $data['avatar_url'] = $res['msg'];
        }

        (new UserModel())->where(['id' => $this->user->id])->update($data);

        return json(['code' => 1, 'msg' => '修改成功']);
    }

}
