<?php

namespace app\index\controller;

use think\Controller;
use think\Request;
use app\common\typeCode\GoodsCate as GoodsCateController;
use app\common\model\Category as CateModel;
use app\common\model\UserAddress as AddressModel;
use app\common\model\Goods as GoodsModel;
use app\common\model\Shopping as ShoppingModel;
use app\common\model\Order as OrderModel;
use app\common\model\OrderGoods as OrderGoodsModel;
use think\Validate;

class Order extends Base
{
    public $user ;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->user = $this->userInfo;
    }

    //确认订单
    public function confirm(Request $request)
    {
        $shopping_ids = str_replace('_',',',$request->param('shopping') ?? "0");

        //商品分类
        $gc = new GoodsCateController();
        $cateModel = (new CateModel());
        $goods_cate = $cateModel->getList($gc->cacheName, $gc->cateType);


        //查询用户收货地址
        $address = (new AddressModel())->where(['user_id'=>$this->user->id])->order('id','desc')->select();

        $shopping = (new ShoppingModel())->alias('shopping')
            ->join('goods goods','goods.id = shopping.goods_id and shopping.user_id = '.$this->user->id)
            ->whereIn('shopping.id',$shopping_ids)
            ->field('shopping.id,goods.id goods_id,goods.real_price,goods.title goods_title,goods.pic goods_pic')
            ->field('shopping.num goods_num,shopping.create_time')
            ->select()->toArray();

        $this->assign('address',$address);

        $this->assign('shopping',$shopping);

        $this->assign('goods_cate', $goods_cate);


        return $this->fetch();
    }

    public function make(Request $request)
    {
        $post = $request->post();
        $rules = [
            'address_id'    => 'require',
            'shopping_ids'  => 'require',
            '__token__'     => 'token',
        ];

        $messages = [
            'address_id.require'    => '请选择一个收货地址',
            'shopping_ids.require'    => '请求非法',
            '__token__.token'       => '不能重复提交'
        ];

        $validate = new Validate($rules,$messages);

        if (!$validate->check($post)){
            return json(['code'=>0,'msg'=>$validate->getError()]);
        }

        $order = (new OrderModel());
        $order->startTrans();
        try{

        $goods = (new GoodsModel())->alias('goods')
            ->join('shopping shopping','goods.id = shopping.goods_id and shopping.user_id ='.$this->user->id)
            ->whereIn('shopping.id',$post['shopping_ids'])
            ->field('goods.*,shopping.num goods_num')
            ->select()->toArray();
        if(!$goods) return json(['code'=>0,'msg'=>'操作非法']);
        $order_goods = [];
        $pay_money = 0;
        $order_price = '';
        $order_title = '';
        foreach ($goods as $key => $value){
            if ($value['status'] != '1' || $value['delete_time'] != 0){
                return json(['code'=>0,'msg'=>$value['title'].'已被下架']);
            }
            $key == 0 && $order_price = $value['pic'];
            $order_title .= $value['title'] . " ";
            $pay_money += ($value['goods_num'] * $value['real_price']);

            $order_goods[] = [
                'goods_json_encode' => json_encode($value,256),
                'num'               => $value['goods_num'],
                'create_time'       => time(),
            ];
        }

        $address = (new AddressModel())->where(['id'=>$post['address_id'],'user_id'=>$this->user->id])->find()->toArray();
        $order_code = $this->createOrderCode();


        $order_data = [
            'order_code'    => $order_code,
            'pic'           => $order_price,
            'user_id'       => $this->user->id,
            'address'       => json_encode($address,256),
            'pay_money'     => $pay_money,
            'order_title'   => $order_title,
            'create_time'   => time(),
        ];


            $order->insert($order_data);
            $order_id = $order->getLastInsID();
            foreach ($order_goods as $key => $value){
                $order_goods[$key]['order_id'] = $order_id;
            }
            (new OrderGoodsModel())->insertAll($order_goods);

            //删除掉购物车
            (new ShoppingModel())->where(['user_id'=>$this->user->id])
                ->whereIn('id',$post['shopping_ids'])->delete();

            $order->commit();
        }catch (\Exception $e){
            $order->rollback();
            return json(['code'=>0,'msg'=>$e->getMessage()]);
        }

        return json(['code'=>1,'msg'=>'success']);
    }

    /**
     * 生成唯一订单号
     * @return string
     */
    private function createOrderCode()
    {
        $order_date = date('Y-m-d');

        //订单号码主体（YYYYMMDDHHIISSNNNNNNNN）

        $order_id_main = date('YmdHis') . rand(10000000, 99999999);

        //订单号码主体长度

        $order_id_len = strlen($order_id_main);

        $order_id_sum = 0;

        for ($i = 0; $i < $order_id_len; $i++) {

            $order_id_sum += (int)(substr($order_id_main, $i, 1));

        }

        //唯一订单号码（YYYYMMDDHHIISSNNNNNNNNCC）

        return $order_id_main . str_pad((100 - $order_id_sum % 100) % 100, 2, '0', STR_PAD_LEFT);
    }
}
